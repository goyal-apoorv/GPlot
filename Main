<!DOCTYPE html>
<html>
<head>
  <title>My Graph Plotter</title>
  <meta charset="UTF-8">
  <style type=text/css> 
         .leftdiv 
         { 
         float: left; 
         } 
		 
         .middlediv 
         {
         float: left; 
         background-color:gray 
         } 
		 
         .rightdiv 
         {
         float: left; 
         }
		 
         div
		 {
         padding : 1%; 
         width: 20%;     
         }
</style> 
<style>
p.small {
    line-height: 0.0;
}
</style>
</head>
<body>
<p id = "WOW"></p>
<p id = "Wow"></p>
<script>
const L2R = 1;
var isImplicit = false;
var raw = "";
var x = 0;
var y = 0;
var exp;
var postfix = [];
var i;
function isVariable(ch){
	return (ch == 'x' || (isImplicit &&  ch == 'y'));
}
function isNum(n){
	return n >= "0" && n <= "9";
}
function isAlpha(n){
	return n >= "a" && n <= "z";
}
function checkBraces(ex){
	var c = 0;
	for(var j = 0; j < ex.length; j++)
		if(ex.charAt(j) == "(")
			c++;
		else if(ex.charAt(j) == ")")
			c--;
	if(c != 0)
		throw "Invalid Number of Braces";
}
function smooth(exp_raw2){
	var ex = "";
	var  c = 0;
	var currch, ch;
	var f = false, f1 = 0, f2 = 0;
	var tmp = [];
	var top = -1;
	var op;
	
	do{
		//console.log("Hey");
		currch = exp_raw2.charAt(i);
		//console.log(currch);
		if(isNum(currch)){
			ex = extractNum(exp_raw2);
			if((!f && !f1 && tmp[top] != '(') || tmp[top] == ')')
				tmp[++top] = "*";
			tmp[++top] = ex;
			while(f2){
				tmp[++top] = ')';
				f2--;
			}
			while(f1){
				tmp[++top] = ")";
				f1--;
			}
			//console.log("a0");
			f = false;
		}
		else if(isAlpha(currch)){
			//console.log("Ho");
			ex = extractFunc(exp_raw2);
			if((!f && !f1 && tmp[top] != '(') || tmp[top] == ')')
					tmp[++top] = "*";
			if(isVariable(ex)){
				tmp[++top] = ex;
				while(f2){
					tmp[++top] = ')';
					f2--;
				}
				while(f1){
					tmp[++top] = ")";
					f1--;				
				}
				//console.log("b0");
				f = false;
			}
			else{
				f1++;
				tmp[++top] = ex;
				tmp[++top] = "("; 
				//console.log("c1");
				f = false;
			}
		}
		else if(currch == '('){
			//console.log("Ho");
			if(top != -1 && (tmp[top] == ')' || isNum((tmp[top]).charAt(0)) || isVariable(tmp[top])))
				tmp[++top] = '*';
			if(c != 0){
			//console.log(ex);
				ex = smooth(exp_raw2);
				i--;
				if(f1){
					top--;
					f1--;
				}
				for(var k = 0; k < ex.length; k++)
					tmp[++top] = ex[k];
				f = false;
			}
			else{
				tmp[++top] = currch;
				c++;
				f = false;
			}
		}
		else if(currch == ")"){
			//console.log("Hello");
			tmp[++top] = currch;
			c--;
			while(f2){
				tmp[++top] = ')';
				f2--;
			}
			while(f1){
				tmp[++top] = ")";
				f1--;				
			}
			//console.log("f = "+ f +" i = " + i);
			if(f){
				//console.log("Ex");
				throw "Invalid Expression";
			}
			f = false;
		}
		/*else if(currch == " " && ch!=" "){
			console.log("Ho");
			if(f1)
				tmp += "(";
		}*/
		else if(!(isNum(currch) || isAlpha(currch)) && currch != " "){
			if(f || tmp[top] == '('){
				if(precedence(currch) == 0){
					tmp[++top] ='(';
					tmp[++top] = '0';
					f2++;
				}
				else{
					//console.log("WOWO");
					throw "Invalid Expression";
				}
			}
			tmp[++top] = currch;
			//console.log("e1");
			f = true;
		}
		//ch = exp_raw2.charAt(i);
		//console.log("tmp = " + tmp.join(""));
		i++;
	}while(c != 0 );
	return tmp;
}
function assoc(op){
	if(op != '^')
		return L2R;
	return 0;
}
function precedence(opr){
	var a = -1;
	if(opr === '+' || opr ==='-')
		a = 0;
	else if(opr === '*' || opr === '/')
		a = 1;
	else if(opr === '(' || opr === ')')
		a = 3;
	else if(opr == '^')
		a = 2;
	else if(opr == ',')
		a = 4;
	else if(isAlpha(opr.charAt(0)))
		a = 10;
	else{
		//console.log(opr);
		throw "Invalid Operator";
	}
	/*else if (opr <='9' && opr >= '0' || opr == '.')
		a = -1;
	else
		a = 10;*/
	return a;
}
function extractNum(ex){
	var n = "";
	var c = 0;
	while(i < ex.length && isNum(ex[i])){
		if(ex[i] == ".")
			c++;
		n += ex.charAt( i++ );
	}
	if(c > 1)
		throw "Invalid Expression";
	i--;
	return n;
	
}
function some_name(op1,op2){
	if(precedence(op1) > precedence(op2))
		return 1;
	if(precedence(op1) == precedence(op2) && assoc(op1) == L2R)
		return 1;
	return 0;	
}
function extractFunc(ex){
	var fun = "";
	while( i < ex.length && (isAlpha(ex.charAt(i)) || isNum(ex.charAt(i))))
		fun += ex.charAt(i++);
	i--;
	return fun;
}
function parsing(){
	var op = [];
	var l = 0, j = -1;
	for ( i = 0; i < exp.length; i++){
		if (isAlpha(exp[i].charAt(0))){
			var string = exp[i];
			if(isVariable(string))
				postfix[l++] = string;
			else
				op[++j] = string;
		}		
		else if(isNum(exp[i].charAt(0))){
			postfix[l++] = exp[i];
		}
		else if(exp[i] == '(')
				op[++j] = '(';
		else if(exp[i] == ')'){
			while (op[j] != '(')
				postfix[l++] = op[j--];
			j--;
		}
		else if(exp[i] == ','){
			while(op[j] != '(')
				postfix[l++] = op[j--];		
		}
		else{
			while(j != -1 && op[j]!='(' && some_name(op[j],exp[i]))
				postfix[l++]=op[j--];
			op[++j] = exp[i];
		}
	}
	while(j != -1)
		postfix[l++] = op[j--];
}
function UnBiTe(ch){
	if(ch == "logn")
		return 2;
	return 1;
}
function eval(ob){
	var val;
	if(ob.func == '+')
		val = ob.val1 + ob.val2;
	else if(ob.func == '-')
		val = ob.val1 - ob.val2;
	else if(ob.func == '*')
		val = ob.val1 * ob.val2;
	else if(ob.func == '/')
		val = ob.val1 / ob.val2;
	else if(ob.func == '^')
		val = Math.pow(ob.val1,ob.val2);
	else if(ob.func == "sin")
		val = Math.sin(ob.val1);
	else if(ob.func == "cos")
		val = Math.cos(ob.val2);
	else if(ob.func == "tan")
		val = Math.tan(ob.val1);
	else if(ob.func == "exp")
		val = Math.exp(ob.val1);
	else if(ob.func == "logn")
		val = Math.log(ob.val1)/Math.log(ob.val2);
	else if(ob.func == "loge")
		val = Math.log(ob.val1);
	else
		throw "Unidentified Fuction";
	return val;
}
function evaluate(x, y = 0){
	try{
		var value = [];
		var ch;
		var j = -1;
		for (var k = 0; k < postfix.length; k++){
			ch = postfix[k];
			if(ch == 'x')
				value[++j] = x;
			else if(isImplicit && ch == 'y')
				value[++j] = y;
			else if(isNum(ch.charAt(0))){
				value[++j] = parseFloat(ch);
			}
			else if(!(isNum(ch) || isAlpha(ch))){
				value [j-1] = eval({func:ch ,val1:value[j-1], val2:value[j]});
				j--;
			}
			else if(isAlpha(ch.charAt(0))){
				switch(UnBiTe(ch)){
					case 1: value[j] = eval({func:ch, val1:value[j]});
							break;
					case 2: value[j-1] = eval({func: ch, val1:value[j-1], val2: value[j]});
							j--;
							break;
				}
			}
			//console.log(value[0]);
		}
		if(j != 0)
			throw "Invalid Expression";
		//console.log("Evaluate " + x + " " + y);
		return value[0];
	}	
	catch(err){
		document.getElementById("WOW").innerHTML = "Check Console";
		//console.log(err);
	}
}
function checkFunc(ex){
	var c, d;
	for(var j = 0; j < ex.length; j++){
		if(isAlpha(ex[j].charAt(0)) && !isVariable(ex[j])){
			c = 0;
			d = 0;
			for(var k = j + 1; k < ex.length; k++){
				if(ex[k] == '(')
					c++;
				else if(ex[k] == ')')
					c--;
				else if(c == 1 && ex[k] == ',')
					d++;
				else if(d == 0){
					//console.log(k-j);
					d = 1;
				}
				if(c == 0)
					break;
				//console.log("d = " + d + " c = " + c);
			}
			//console.log(ex[j] + " " + d)
			if(d != UnBiTe(ex[j]))
				throw "Invalid Number of Parameters";
		}
	}

}
function set(exp_raw){
	try{
		//console.log(exp_raw);
		/*for(var k =0;k<raw.length;k++)
			raw[k]='\0';*/
		raw = ("(" + exp_raw + ")").toLowerCase() + '\0';
		checkBraces(raw);
		//console.log("if");
		i = 0;
		exp = [];
		exp = smooth(raw);
		//console.log(exp.join(" "));
		checkFunc(exp);
		//console.log("reached");
		i = 0;
		postfix = [];
		parsing();
		//console.log("Here");
	}
	catch(err){
		document.getElementById("WOW").innerHTML = err;
		console.log(err);
	}
}

function printing(){
	var output = "";
		set(raw);
		for ( var k = 0; k < postfix.length; k++ )
			output += " " + postfix[k];
		var val = evaluate(x, y);
		//console.log("Then it is awesome");
		document.getElementById("WOW").innerHTML = "Raw Expression : "+ raw + "<br>" + "Corected Expression : " + exp.join("") + "<br>" +"Postfix Expression : "+ output + "<br>" + "Value : " + val;
}
//printing();
</script>
<script>
var precision = 0.001;
var count = 100;
var range = {yL:-10,yR:10};
var preci = 0.1;
function findX(/*ex, */x){
	var yl, yr, fyl, fyr;
	/*isImplicit = true;
	set(ex);*/
	yl = range.yL;
	var Y = [];
	var l = 0;
	fyl = evaluate(x, yl);
	while(Math.abs(fyl) < precision){
		Y[l++] = yl;
		yl += preci;
		fyl = evaluate(x, yl);
	}
	for(yr = yl + preci; yr <= range.yR; yr += preci){
		fyr = evaluate(x, yr);
		if(Math.abs(fyr) < precision){
			Y[l++] = yr;
			yl = yr + preci;
			yr = yr + preci;
			fyl = evaluate(x, yl);
		}
		else if(fyr * fyl > 0){
			fyl = fyr;
			yl = yr;
		}
		else{
			var t = secantMethod(x, yl, yr);
			Y[l++] = t;
			yl = yr;
			fyl = fyr;
		}
	
	}
	console.log( Y.join("\n"));
	return Y;
}
function secantMethod(x, y1, y2){
	var fy1 = evaluate(x, y1);
	var fy2 = evaluate(x, y2);
	var y3, fy3;
	for(var j = 0; j < count; j++){
		y3 = y1 - fy1 * (y2 - y1) / (fy2 - fy1);
		fy3 = evaluate(x, y3);
		if(Math.abs(fy3) < precision)
			return y3;
		else if(fy3 * fy1 < 0){
			y2 = y3;
			fy2 = fy3;
		}
		else{
			y1 = y3;
			fy1 = fy3;
		}
	}
	return NaN;
}
//document.getElementById("WOW").innerHTML = findX("sin x -y*x",1).join("<br>");
</script>




<p id = "test" style = 'font-size:40px;color:red;text-align:center' class="small">The Graphical Calculator</p>
<!--<p id ="test"></p>-->

<div class="leftdiv" >
<p class = "small">
<h2>Enter function to plot </h2>
<strong>Function:</strong><br>
<form id = "text" onsubmit = "return false">
<input type="text" name="function">
<br><br>
<input id = "a" type="submit" onclick="inputDataI()">
</form>
</p>
</div>



<div class="rightdiv"><p align="center" class = "small" >
<canvas id = "PlotSpace" width= "800px" height = "560px" style = "border:7px solid #D3D3D3;"></canvas> 
</p></div>


<script>
var plot = { x0: NaN,
			 y0: NaN,
			 
				
			};
function draw(p1, p2){
	 if(wasDis){
		if(!isOut(p2)){
			p1.x = p2.x;
			p2.y = p2.y;
		}
	 }
	 else{
		graph.moveTo(p1.x0 , y0);
		graph.lineTo(x1, y1);
		x0 = x1;
		y0 = y1;
	 
	 }
}
var input = "";
//document.getElementById("test").innerHTML = input;
var width = 800;
var b = 560;
var canvas = document.getElementById("PlotSpace")
var graph = canvas.getContext("2d");
graph.font ="12graphx Aerial";

graph.translate(a/2,b/2);
graph.beginPath();
graph.moveTo(-a/2,0);
graph.lineTo(a/2,0);
graph.moveTo(0,-b/2);
graph.lineTo(0,b/2);
graph.strokeStyle = '#000000';
graph.stroke();
//graph.closePath();
for(l=-b/2;l<=b/2;l+=40)
 {
 graph.beginPath();
 graph.moveTo(-a/2,l);
 graph.lineTo(a/2,l);
 graph.strokeStyle = '#D3D3D3';
 graph.stroke();
 graph.fillText(-l/10,0,l);
 graph.closePath();
 }
 
 for(l=-a/2;l<=a/2;l+=40)
 {
 graph.beginPath();
 graph.moveTo(l,-b/2);
 graph.lineTo(l,b/2);
 graph.strokeStyle = '#D3D3D3';
 graph.stroke();
 graph.fillText(l/10,l-8,11);
 graph.closePath();
 }
 


function inputData(input = "")
{
//console.log("Z");
var x1;
var f = 0;
isImplicit = 0;
//input = document.getElementById("text").elements[0].value;
set(input);

console.log(postfix.join(" ") + "\n" + exp.join(" "));
//var plot = document.getElementById("PlotSpace").getContext("2d");
//plot.translate(a/2,b/2);
graph.strokeStyle = "#ff0000";
graph.lineWidth = 2;
graph.beginPath();
y=-evaluate(x1/10)*10;
graph.moveTo(-a/2,y);
for(x1 = -a/20; x1<= a/20;)
{
x1+=.0035;
y = -evaluate(x1);
if(Math.abs(y) < b/20)
{
if(f){
graph.moveTo(x1*10,y*10)
f = false;
}
else{
graph.lineTo(x1*10,y*10);
}
}
else{
graph.stroke();
	graph.beginPath();
	f = true;
}
//graph.moveTo(x1,y);

}
//console.log("end");

graph.stroke();
//graph.closePath();
}
var pr = preci;															// precision
function inputDataI(input = "")
{
//console.log("Z");
var x1, y1;
input = document.getElementById("text").elements[0].value;
isImplicit = 1;
set(input);
var isDis = true;
console.log(postfix.join(" ") + "\n" + exp.join(" "));
//var graph = document.getElementById("graphSpace").getContext("2d");
//graph.translate(a/2,b/2);
graph.strokeStyle = "#ff0000";
graph.lineWidth = 2;
graph.beginPath();
range.yL = -b/20;
range.yR = b/20;
var cn, cp;
for(x1 = -a/20; x1 <= a/20; x1+=pr){
	//cn = findX(x1);
	if(isDis){
		graph.stroke();
		graph.beginPath();
		cp = findX(x1);
		isDis = false;
	}
	else{
		cn = findX(x1);
		if(cn.length == 0){
			graph.stroke();
			graph.beginPath();
			isDis = true;
		}
		
		else{
			for(var j = 0; j < cn.length; j++){
				if(cn[j] != NaN || cn[i] != NaN){
					graph.moveTo((x1 - pr) * 10, -cp[j] * 10);
					graph.lineTo(x1 * 10, -cn[j] * 10);
				}
			}
		}
		isDis = false;
		cp = cn;
	}
}
graph.stroke();
//graph.moveTo(x1,y);
console.log("end");
}


 </script>
</body>
</html>
